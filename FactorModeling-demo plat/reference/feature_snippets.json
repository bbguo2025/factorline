{
  "earnings_yield": "# ----- Earnings-to-Price factor ---------------------------------\n# inputs: df, subindustry, helper fns from operations.py already imported\n\neps = ts_backfill(df[\"income_eps\"])\nearnings_yield = eps / df[\"close\"]\n\ncap = df[\"cap\"]\nsize_bucket = bucket(cs_rank(cap), bin_range=(0.2, 1.0, 0.1))\n\nalpha = group_neutralize(\n            group_rank_normalized(earnings_yield, subindustry),\n            size_bucket)\n\ncustom_feature = cs_winsor(alpha, limits=(0.02, 0.98)).rename(\"custom_feature\")",
  "book_to_market": "# ----- Book-to-Market factor -----------------------------------\nbook_equity = ts_backfill(df[\"balance_totalStockholdersEquity\"])\nbtm_raw = book_equity / df[\"cap\"]\n\nalpha = group_neutralize(\n            group_rank_normalized(btm_raw, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, limits=(0.02, 0.98)).rename(\"custom_feature\")",
  "roa": "# ----- Return on Assets factor ---------------------------------\nroa = ts_backfill(df[\"income_netIncome\"]) / ts_backfill(df[\"balance_totalAssets\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(roa, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "roe": "# ----- Return on Equity factor ---------------------------------\nroe = ts_backfill(df[\"income_netIncome\"]) / ts_backfill(df[\"balance_totalStockholdersEquity\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(roe, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "roic": "# ----- Return on Invested Capital factor ----------------------\nnopat = ts_backfill(df[\"income_operatingIncome\"]) * (1 - 0.25)  # Assume 25% tax rate\ninvested_capital = ts_backfill(df[\"balance_totalAssets\"]) - ts_backfill(df[\"balance_totalCurrentLiabilities\"])\nroic = nopat / invested_capital\n\nalpha = group_neutralize(\n            group_rank_normalized(roic, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "gross_margin": "# ----- Gross Profit Margin factor -------------------------\ngross_margin = ts_backfill(df[\"income_grossProfit\"]) / ts_backfill(df[\"income_revenue\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(gross_margin, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "operating_margin": "# ----- Operating Margin factor --------------------------\noperating_margin = ts_backfill(df[\"income_operatingIncome\"]) / ts_backfill(df[\"income_revenue\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(operating_margin, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "net_margin": "# ----- Net Profit Margin factor -------------------------\nnet_margin = ts_backfill(df[\"income_netIncome\"]) / ts_backfill(df[\"income_revenue\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(net_margin, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "asset_turnover": "# ----- Asset Turnover factor -----------------------------\nasset_turnover = ts_backfill(df[\"income_revenue\"]) / ts_backfill(df[\"balance_totalAssets\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(asset_turnover, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "inventory_turnover": "# ----- Inventory Turnover factor ------------------------\ninventory_turnover = ts_backfill(df[\"income_costOfRevenue\"]) / ts_backfill(df[\"balance_inventory\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(inventory_turnover, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "receivables_turnover": "# ----- Receivables Turnover factor --------------------\nreceivables_turnover = ts_backfill(df[\"income_revenue\"]) / ts_backfill(df[\"balance_netReceivables\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(receivables_turnover, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "current_ratio": "# ----- Current Ratio factor ------------------------------\ncurrent_ratio = ts_backfill(df[\"balance_totalCurrentAssets\"]) / ts_backfill(df[\"balance_totalCurrentLiabilities\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(current_ratio, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "quick_ratio": "# ----- Quick Ratio factor --------------------------------\nquick_ratio = (ts_backfill(df[\"balance_totalCurrentAssets\"]) - ts_backfill(df[\"balance_inventory\"])) / ts_backfill(df[\"balance_totalCurrentLiabilities\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(quick_ratio, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "cash_ratio": "# ----- Cash Ratio factor --------------------------------\ncash_ratio = ts_backfill(df[\"balance_cashAndCashEquivalents\"]) / ts_backfill(df[\"balance_totalCurrentLiabilities\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(cash_ratio, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "debt_to_equity": "# ----- Debt-to-Equity factor ---------------------------\ndebt_to_equity = ts_backfill(df[\"balance_totalLiabilities\"]) / ts_backfill(df[\"balance_totalStockholdersEquity\"])\n\nalpha = -group_neutralize(\n            group_rank_normalized(debt_to_equity, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "debt_to_assets": "# ----- Debt-to-Assets factor --------------------------\ndebt_to_assets = ts_backfill(df[\"balance_totalLiabilities\"]) / ts_backfill(df[\"balance_totalAssets\"])\n\nalpha = -group_neutralize(\n            group_rank_normalized(debt_to_assets, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "interest_coverage": "# ----- Interest Coverage factor -----------------------\ninterest_coverage = ts_backfill(df[\"income_operatingIncome\"]) / ts_backfill(df[\"income_interestExpense\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(interest_coverage, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "revenue_growth": "# ----- Revenue Growth factor ---------------------------\nrev_now = ts_backfill(df[\"income_revenue\"])\nrev_prev = ts_delay(rev_now, 252)\nrevenue_growth = (rev_now - rev_prev) / rev_prev\n\nalpha = group_neutralize(\n            group_rank_normalized(revenue_growth, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "earnings_growth": "# ----- Earnings Growth factor -------------------------\nearnings_now = ts_backfill(df[\"income_netIncome\"])\nearnings_prev = ts_delay(earnings_now, 252)\nearnings_growth = (earnings_now - earnings_prev) / earnings_prev\n\nalpha = group_neutralize(\n            group_rank_normalized(earnings_growth, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "asset_growth": "# ----- Asset Growth factor -----------------------------\nassets_now = ts_backfill(df[\"balance_totalAssets\"])\nassets_prev = ts_delay(assets_now, 252)\nasset_growth = (assets_now - assets_prev) / assets_prev\n\nalpha = group_neutralize(\n            group_rank_normalized(asset_growth, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "accruals_quality": "# ----- Accruals Quality factor -----------------------\naccruals = (ts_backfill(df[\"income_netIncome\"]) - ts_backfill(df[\"cashflow_operatingCashFlow\"])) / ts_backfill(df[\"balance_totalAssets\"])\n\nalpha = -group_neutralize(\n            group_rank_normalized(accruals, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "cash_flow_quality": "# ----- Cash Flow Quality factor ---------------------\ncfo_quality = ts_backfill(df[\"cashflow_operatingCashFlow\"]) / ts_backfill(df[\"income_netIncome\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(cfo_quality.replace([np.inf, -np.inf], np.nan), subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "working_capital_quality": "# ----- Working Capital Quality factor ------------\nworking_capital = ts_backfill(df[\"balance_totalCurrentAssets\"]) - ts_backfill(df[\"balance_totalCurrentLiabilities\"])\nworking_capital_quality = working_capital / ts_backfill(df[\"balance_totalAssets\"])\n\nalpha = group_neutralize(\n            group_rank_normalized(working_capital_quality, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "earnings_persistence": "# ----- Earnings Persistence factor ------------------\nearnings_std = ts_backfill(df[\"income_netIncome\"]).groupby(level=\"symbol\").rolling(8).std()\nearnings_mean = ts_backfill(df[\"income_netIncome\"]).groupby(level=\"symbol\").rolling(8).mean()\nearnings_persistence = -earnings_std / earnings_mean.abs()\n\nalpha = group_neutralize(\n            group_rank_normalized(earnings_persistence, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "earnings_predictability": "# ----- Earnings Predictability factor ------------\n# Use rolling R-squared of earnings vs lagged earnings\ndef earnings_r2(series):\n    if len(series) < 4:\n        return np.nan\n    y = series.iloc[1:]\n    x = series.iloc[:-1]\n    if len(x) < 2:\n        return np.nan\n    try:\n        from sklearn.linear_model import LinearRegression\n        model = LinearRegression()\n        model.fit(x.values.reshape(-1, 1), y.values)\n        return model.score(x.values.reshape(-1, 1), y.values)\n    except:\n        return np.nan\n\nearnings = ts_backfill(df[\"income_netIncome\"])\nearnings_predictability = earnings.groupby(level=\"symbol\").rolling(8).apply(earnings_r2)\n\nalpha = group_neutralize(\n            group_rank_normalized(earnings_predictability, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "earnings_smoothing": "# ----- Earnings Smoothing factor --------------------\n# Correlation between earnings and cash flows\ndef earnings_cash_corr(series):\n    if len(series) < 4:\n        return np.nan\n    try:\n        return series.corr(series.shift(1))\n    except:\n        return np.nan\n\nearnings = ts_backfill(df[\"income_netIncome\"])\ncash_flows = ts_backfill(df[\"cashflow_operatingCashFlow\"])\nearnings_smoothing = earnings.groupby(level=\"symbol\").rolling(8).apply(earnings_cash_corr)\n\nalpha = group_neutralize(\n            group_rank_normalized(earnings_smoothing, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "ev_ebitda": "# ----- EV/EBITDA factor ---------------------------------\nebitda = ts_backfill(df[\"income_ebitda\"])\nev_ebitda_ratio = df[\"cap\"] / ebitda  # Simplified EV approximation\n\nalpha = -group_neutralize(\n            group_rank_normalized(ev_ebitda_ratio, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "price_to_sales": "# ----- Price-to-Sales factor -------------------------\nrevenue = ts_backfill(df[\"income_revenue\"])\nprice_to_sales = df[\"cap\"] / revenue\n\nalpha = -group_neutralize(\n            group_rank_normalized(price_to_sales, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "price_to_cashflow": "# ----- Price-to-Cash Flow factor -------------------\ncash_flow = ts_backfill(df[\"cashflow_operatingCashFlow\"])\nprice_to_cashflow = df[\"cap\"] / cash_flow\n\nalpha = -group_neutralize(\n            group_rank_normalized(price_to_cashflow, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "capital_efficiency": "# ----- Capital Efficiency factor --------------------\nrevenue = ts_backfill(df[\"income_revenue\"])\ntotal_assets = ts_backfill(df[\"balance_totalAssets\"])\ncapital_efficiency = revenue / total_assets\n\nalpha = group_neutralize(\n            group_rank_normalized(capital_efficiency, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "employee_productivity": "# ----- Employee Productivity factor ----------------\n# Using revenue as proxy for employee productivity\nrevenue = ts_backfill(df[\"income_revenue\"])\ntotal_assets = ts_backfill(df[\"balance_totalAssets\"])\nemployee_productivity = revenue / total_assets  # Asset-based proxy\n\nalpha = group_neutralize(\n            group_rank_normalized(employee_productivity, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "financial_flexibility": "# ----- Financial Flexibility factor ----------------\ncash = ts_backfill(df[\"balance_cashAndCashEquivalents\"])\ntotal_debt = ts_backfill(df[\"balance_totalDebt\"])\nfinancial_flexibility = cash / total_debt\n\nalpha = group_neutralize(\n            group_rank_normalized(financial_flexibility, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "fcf_yield": "# ----- Free Cash Flow Yield factor ----------------------\nfcf = ts_backfill(df[\"cashflow_freeCashFlow\"])\nfcf_yield = fcf / df[\"cap\"]\n\nalpha = group_neutralize(\n            group_rank_normalized(fcf_yield, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "price_volatility": "# ----- Price Volatility factor -----------------------\nreturns = df[\"log_return\"]\nprice_volatility = returns.groupby(level=\"symbol\").rolling(252).std()\n\nalpha = -group_neutralize(\n            group_rank_normalized(price_volatility, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "earnings_volatility": "# ----- Earnings Volatility factor ------------------\nearnings = ts_backfill(df[\"income_netIncome\"])\nearnings_volatility = earnings.groupby(level=\"symbol\").rolling(8).std()\n\nalpha = -group_neutralize(\n            group_rank_normalized(earnings_volatility, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "piotroski_score": "# ----- Piotroski F-Score (Simplified) factor --------\n# Simplified version of Piotroski's 9-point scoring system\nroe = ts_backfill(df[\"income_netIncome\"]) / ts_backfill(df[\"balance_totalStockholdersEquity\"])\nroa = ts_backfill(df[\"income_netIncome\"]) / ts_backfill(df[\"balance_totalAssets\"])\ndebt_ratio = ts_backfill(df[\"balance_totalLiabilities\"]) / ts_backfill(df[\"balance_totalAssets\"])\ncurrent_ratio = ts_backfill(df[\"balance_totalCurrentAssets\"]) / ts_backfill(df[\"balance_totalCurrentLiabilities\"])\n\n# Create binary scores (1 if positive, 0 if negative)\nscore1 = (roe > 0).astype(int)\nscore2 = (roa > 0).astype(int)\nscore3 = (debt_ratio < 0.5).astype(int)\nscore4 = (current_ratio > 1).astype(int)\n\npiotroski_score = score1 + score2 + score3 + score4\n\nalpha = group_neutralize(\n            group_rank_normalized(piotroski_score, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "altman_z_score": "# ----- Altman Z-Score (Simplified) factor ------------\n# Simplified version of Altman's Z-Score\nworking_capital = ts_backfill(df[\"balance_totalCurrentAssets\"]) - ts_backfill(df[\"balance_totalCurrentLiabilities\"])\nretained_earnings = ts_backfill(df[\"balance_retainedEarnings\"])\nebit = ts_backfill(df[\"income_operatingIncome\"])\ntotal_assets = ts_backfill(df[\"balance_totalAssets\"])\ntotal_liabilities = ts_backfill(df[\"balance_totalLiabilities\"])\n\n# Z-Score components\nz1 = working_capital / total_assets\nz2 = retained_earnings / total_assets\nz3 = ebit / total_assets\nz4 = df[\"cap\"] / total_liabilities\n\naltman_z = 1.2*z1 + 1.4*z2 + 3.3*z3 + 0.6*z4\n\nalpha = group_neutralize(\n            group_rank_normalized(altman_z, subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "momentum": "# ----- Price Momentum factor -----------------------------------\nmom_long  = ts_sum(df[\"log_return\"], 252)   # past 12 m\nmom_short = ts_sum(df[\"log_return\"], 21)    # recent month\nraw = mom_long - mom_short\n\nalpha = group_neutralize(raw, subindustry)\nalpha = ts_decay(alpha, window=3)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "size": "# ----- Size factor (SMB style) ---------------------------------\nrank_size = group_neutralize(\n                group_rank_normalized(df[\"cap\"], subindustry),\n                subindustry)\n\nalpha = -cs_winsor(rank_size, limits=(0.02, 0.98))\ncustom_feature = alpha.rename(\"custom_feature\")",
  "earnings_management": "# ----- Earnings management factor ------------------------------\naccruals = (ts_backfill(df[\"income_netIncome\"]) - ts_backfill(df[\"cashflow_operatingCashFlow\"]))\n\ntotal_assets = ts_backfill(df[\"balance_totalAssets\"])\naccrual_ratio = accruals / total_assets\n\nalpha = -group_neutralize(\n            group_rank_normalized(accrual_ratio.abs(), subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")",
  "earnings_manipulation": "# ----- Earnings manipulation factor (DSRI) ---------------------\nreceivables = ts_backfill(df[\"balance_netReceivables\"])\nsales = ts_backfill(df[\"income_revenue\"])\n\ndsri_now  = receivables / sales\ndsri_prev = ts_delay(dsri_now, 252)\ndsri = dsri_now / dsri_prev\n\nalpha = -group_neutralize(\n            group_rank_normalized(dsri.replace([np.inf, -np.inf], np.nan), subindustry),\n            subindustry)\n\ncustom_feature = cs_winsor(alpha, (0.02, 0.98)).rename(\"custom_feature\")"
}